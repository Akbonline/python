'''
Given a square matrix, calculate the absolute difference between the sums of its diagonals.

For example, the square matrix  is shown below:

1 2 3
4 5 6
9 8 9  
The left-to-right diagonal = 1+5+9=15. The right to left diagonal = 3+5+9=17. Their absolute difference is |15-17|=2.

Function description
Complete the  function in the editor below. It must return an integer representing the absolute diagonal difference.
diagonalDifference takes the following parameter:
->arr: an array of integers .

Input Format
The first line contains a single integer, , the number of rows and columns in the matrix .
Each of the next  lines describes a row, , and consists of  space-separated integers .
Output Format
Print the absolute difference between the sums of the matrix's two diagonals as a single integer.

Sample Input
3
11 2 4
4 5 6
10 8 -12

Sample Output
15

Explanation
The primary diagonal is:
11
   5
     -12
Sum across the primary diagonal: 11 + 5 - 12 = 4
The secondary diagonal is:

     4
   5
10
Sum across the secondary diagonal: 4 + 5 + 10 = 19
Difference: |4 - 19| = 15

Note: |x| is the absolute value of x
'''
#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *readline();
char **split_string(char *);

// Complete the diagonalDifference function below.
int diagonalDifference(int arr_rows, int arr_columns, int **arr) {
  int i, j;
  int sum1, sum2, diff;
  sum1 = sum2 = 0;
  for (i = 0; i < arr_rows; i++) {
    for (j = 0; j < arr_columns; j++) {
      if (i == j) {
        sum1 = sum1 + arr[i][j];
      }
      if (i + j == arr_rows - 1) {
        sum2 = sum2 + arr[i][j];
      }
    }}
    if (sum1 > sum2) {
      return sum1 - sum2;
    } else {
      return sum2 - sum1;
    }
  
}

int main() {
  FILE *fptr = fopen(getenv("OUTPUT_PATH"), "w");

  char *n_endptr;
  char *n_str = readline();
  int n = strtol(n_str, &n_endptr, 10);

  if (n_endptr == n_str || *n_endptr != '\0') {
    exit(EXIT_FAILURE);
  }

  int **arr = malloc(n * sizeof(int *));

  for (int i = 0; i < n; i++) {
    *(arr + i) = malloc(n * (sizeof(int)));

    char **arr_item_temp = split_string(readline());

    for (int j = 0; j < n; j++) {
      char *arr_item_endptr;
      char *arr_item_str = *(arr_item_temp + j);
      int arr_item = strtol(arr_item_str, &arr_item_endptr, 10);

      if (arr_item_endptr == arr_item_str || *arr_item_endptr != '\0') {
        exit(EXIT_FAILURE);
      }

      *(*(arr + i) + j) = arr_item;
    }
  }

  int arr_rows = n;
  int arr_columns = n;

  int result = diagonalDifference(arr_rows, arr_columns, arr);

  fprintf(fptr, "%d\n", result);

  fclose(fptr);

  return 0;
}

char *readline() {
  size_t alloc_length = 1024;
  size_t data_length = 0;
  char *data = malloc(alloc_length);

  while (true) {
    char *cursor = data + data_length;
    char *line = fgets(cursor, alloc_length - data_length, stdin);

    if (!line) {
      break;
    }

    data_length += strlen(cursor);

    if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
      break;
    }

    alloc_length <<= 1;

    data = realloc(data, alloc_length);

    if (!line) {
      break;
    }
  }

  if (data[data_length - 1] == '\n') {
    data[data_length - 1] = '\0';

    data = realloc(data, data_length);
  } else {
    data = realloc(data, data_length + 1);

    data[data_length] = '\0';
  }

  return data;
}

char **split_string(char *str) {
  char **splits = NULL;
  char *token = strtok(str, " ");

  int spaces = 0;

  while (token) {
    splits = realloc(splits, sizeof(char *) * ++spaces);

    if (!splits) {
      return splits;
    }

    splits[spaces - 1] = token;

    token = strtok(NULL, " ");
  }

  return splits;
}
